(function(){var n={2894:function(n,t,e){"use strict";e.r(t),t["default"]="+++\ntitle = 'Dora.ai 使用体验'\ndate = 2024-09-06\n+++\n\n### Website\n[Dora.ai 官网](https://www.dora.run/ai)\n\nDora AI 是一个无需编码的 AI 网站生成工具，用户只需通过文本提示即可创建网站。它的主要特点包括生成 3D 动画、交互式设计以及无模板限制的自定义布局。Dora AI 支持从 Figma 等设计工具导入作品，并适合初学者和专业人士使用。平台目前提供免费版本，用户可以轻松创建具有视觉吸引力的动态网站 \n\n[Dora AI - Sites beyond imagination, one prompt away.](https://www.dora.run/ai) \n\n[Dora: Start with AI, ship 3D animated websites without code](https://www.dora.run/) \n\n[Dora AI - Powerful AI-Powered Website Builder  | B12](https://www.b12.io/ai-directory/dora-ai/)。\n\n### 尝试1：生成结果\nPrompt: \n```\n为达到解决高校社团人数众多，难以统一及时管理，活动申请等步骤费时费力的问题，使用 eclipse 和 Oracle 数据库来开发社团管理系统，主要模块是：个人信息模块，实现用户的注册、登录、用户个人信息的查询及修改；网上发布模块，实现用户在登录之后能上传照片，用户们都可以进行评论；日常活动模块，实现用户向管理员发出活动申请，以及对普通社员发出社团通知；审核模块，管理员对用户在网上发布的内容进行审核，对日常活动的申请进行审核；用户管理模块，管理员对用户进行添加、修改、删除、查询。统计分析不同社团成员的数量、流失率、活跃度等。\n```\n\n![Dora-ai 使用体验](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/Dora-ai%20使用体验.png)\n\n### 尝试2：生成结果\n![Dora-ai 使用体验-1](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/Dora-ai%20使用体验-1.png)\n\n之后继续生成，显示博客内容详情页面，但我发现设计语言被随机生成成了另外一种风格。\n\n![Dora-ai 使用体验-2](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/Dora-ai%20使用体验-2.png)\n\n### 尝试3：自定义设计风格\nPrompt:\n```\nA landing page for a software engineer's personal blog often shares technical articles and blog posts. It needs to have a personal introduction area and another page or area to display the article content. Black and white style, as simple as possible.\n```\n\n![Dora-ai 使用体验-3](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/Dora-ai%20使用体验-3.png)\n\n### 尝试生成所有博客页面\n![Dora-ai 使用体验-4](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/Dora-ai%20使用体验-4.png)\n\n![Dora-ai 使用体验-5](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/Dora-ai%20使用体验-5.png)\n\n然而，生成的博客内容布局仍然随机，难以使用定制化代码去呈现，整体展现依然像是首页风格。由于生成的页面编程难度较大，客制化难度也随之增加。\n\n### 结论\nDora.ai 适合用于生成网站「首页」，但具体逻辑还是需要自行实现。使用 Dora.ai 构建网站设计需遵循其生成的固定「设计语言」，后续功能可能需要适配这个设计原则，适配成本可能会高于自行设计和开发。"},3352:function(n,t,e){"use strict";e.r(t),t["default"]='+++\ntitle = "IDEA破解"\ndate = 2024-08-29\n+++\n\n[查看原文](https://blog.csdn.net/m0_37632915/article/details/137877994)\n\n### 1. 下载 IDEA\n\n[下载链接](https://www.jetbrains.com/idea/download/download-thanks.html?platform=mac)\n\n### 2. 脚本\n\n下载脚本：[百度网盘链接](https://pan.baidu.com/s/1I2BqdfxSJv1A96422rflnA?pwd=m494) 提取码: m494\n\n![IDEA 破解](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/IDEA%20破解.png)\n\n![IDEA 破解-1](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/IDEA%20破解-1.png)\n\n![IDEA 破解-2](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/IDEA%20破解-2.png)\n\n![IDEA 破解-3](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/IDEA%20破解-3.png)\n\n![IDEA 破解-4](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/IDEA%20破解-4.png)\n\n![IDEA 破解-5](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/IDEA%20破解-5.png)\n\n'},2498:function(n,t,e){"use strict";e.r(t),t["default"]="+++\ntitle = 'JWT的原理和思考'\ndate = 2024-08-30\n+++\n\n### JWT 是啥？\n\nJWT（JSON Web Token）是一种用于在各方之间作为 JSON 对象安全传输信息的开放标准（RFC 7519）。该信息可以被验证和信任，因为它是经过数字签名的。JWT 通常用于身份验证和信息交换。\n\nJWT 由三部分组成，通常以点 (.) 分隔：\n\n1. **Header**（头部）：描述签名的算法和类型，通常使用的是 HMAC SHA256。\n2. **Payload**（负载）：包含声明（claims），这部分是实际的传输数据，可以包括用户身份信息、权限、过期时间等。\n3. **Signature**（签名）：用于验证消息是否未被篡改。它是通过将头部和负载组合在一起，使用指定的签名算法（如 HMAC SHA256）以及一个密钥生成的。\n\nJWT 的基本格式如下：\n\n```\nxxxxx.yyyyy.zzzzz\n```\n\n### JWT 的加密流程\n\nJWT 的一个显著特点是“自包含”，也就是说 JWT 本身包含了所有的信息，无需服务器存储状态，服务器只负责每一次的验证。这样服务器就无需存储客户端状态（如登录状态、过期时间等）。\n\n登录时，服务端会根据用户登录信息和时间戳，返回给客户端一个 JWT token。\n\n![JWT 的原理和思考](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/JWT%20的原理和思考.png)\n\n![JWT 的原理和思考-1](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/JWT%20的原理和思考-1.png)\n\n前端登录成功后，会将 token 存储在 localStorage 中。\n\n![JWT 的原理和思考-2](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/JWT%20的原理和思考-2.png)\n\n![JWT 的原理和思考-3](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/JWT%20的原理和思考-3.png)\n\n### 有什么优点？\n\n之后的 API 调用中，可以不再传递用户信息。通过前端 Hook 和后端 Hook，自动实施鉴权和重定向。\n\n前端可以设置全局请求拦截器，将 JWT token 添加到请求头中。\n\n![JWT 的原理和思考-4](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/JWT%20的原理和思考-4.png)\n\n![JWT 的原理和思考-5](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/JWT%20的原理和思考-5.png)\n\n这样一来，登录模块的权限检查可以独立于具体业务进行鉴权；前端也不再需要在业务代码中传递用户信息，从而提高了代码的可维护性。\n\n### 其他的做法：Session + Cookie\n\n在这种方式中，状态存储在服务端。服务器在用户登录时创建一个会话（Session），并将会话 ID 存储在服务器端（通常在内存或数据库中）。服务器会将会话 ID 通过 cookie 发送到客户端，客户端每次请求时会自动携带这个 cookie。服务器通过会话 ID 查找和验证会话数据，以确定用户身份。与 JWT 不同的是，部分信息存在服务端，没有“自包含”的特点。\n\n### 其他的做法：OAuth 2.0\n\nGoogle 登录是 OAuth 2.0 的具体实现，通过 OAuth 2.0 协议来处理用户身份验证和授权。当用户点击应用中的“使用 Google 登录”按钮时，应用会将用户重定向到 Google 的授权服务器，请求访问用户的 Google 账号信息。用户在 Google 授权页面登录并决定是否授权应用访问其信息。若同意授权，Google 授权服务器会生成一个授权码，并将用户重定向回应用的回调地址，携带授权码作为参数。应用随后使用授权码向 Google 授权服务器请求访问令牌，包含应用 ID、应用密钥、授权码和回调地址等信息。若授权码有效，Google 授权服务器会返回一个访问令牌，并可选地提供一个刷新令牌。应用随后使用访问令牌请求 Google 资源服务器，获取用户的 Google 账号信息，如电子邮件和用户名，以便在应用中创建或登录用户账户。\n\n在 OAuth 2.0 中，Google 提供的访问令牌（Access Token）是有有效期的。一旦令牌过期，服务器端需要判断并处理。Spring Security 会自动处理令牌的过期。若访问令牌过期，Spring Security 会自动尝试使用刷新令牌（Refresh Token）获取新的访问令牌。如果刷新令牌也过期，用户将被重定向到登录页面，要求重新进行认证。如果需要自定义过期处理逻辑，可以实现 `OAuth2AuthorizedClientService` 接口，并重写其中的方法来管理和判断令牌的过期状态。\n\n因此看来，OAuth 2.0 是一种协议，由各大品牌厂商分别实现自己的登录模块，并提供 Token 给应用程序，实现了登录和主应用的解耦。\n"},4732:function(n,t,e){"use strict";e.r(t),t["default"]="+++\ntitle = 'What Happened to Spotify翻译搬运'\ndate = 2024-09-03\n+++\n## 回声室、利润与自2017年以来艺术家发现的衰退\n[Rosie Hoggmascall](https://medium.com/@rosiehoggmascall?source=post_page-----2e9ab9ce313d--------------------------------)  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*eLQ8NdEayb4ov23fLCPuKg.png)  \n*在 [growthdives.com](https://growthdives.com/) 免费阅读 🕺*\n\n时不时地，我会留意工作时背景中播放的音乐。我开始感到不满。  \n*这些歌曲我已经听了成百上千遍。*  \n我打开应用，点击暂停，然后尝试寻找其他音乐。  \n但很难找到我想听的东西。  \n所以我懒得去找，总是听相同的 [深度工作播放列表](https://open.spotify.com/playlist/37i9dQZF1DWZeKCadgRdKQ?si=d347d6deb132402b)，希望它偶尔能更新。  \n这种潜藏的挫败感已经酝酿了几个月。而且我花了一段时间才意识到。  \n直到我读到 [为什么我终于放弃了Spotify](https://www.newyorker.com/culture/infinite-scroll/why-i-finally-quit-spotify) 的文章，由我的朋友Ben分享，作者是[ Kyle Chayka](https://www.newyorker.com/contributors/kyle-chayka) 。  \n**然后一切都明白了。**  \n我意识到：  \n* 我陷入了一个*深度*回声室  \n* 我找不到我想听的歌曲或播客  \n* 我经常迷失在复杂的界面中  \n* **最终，我正在失去与我喜欢的艺术家的联系，音乐品味也停滞不前**\n\n⠀但是为什么呢？  \n很显然，轻松听到好音乐是Spotify的核心价值主张吧？显然他们正在朝这个方向努力？  \n……  \n为了试图解开我的回声室以及缺乏新曲目的困扰，我回溯到2017年，研究了首页的结构如何帮助我们发现音乐，以及这些年来的变化。  \n我们将探讨Spotify的UI、UX以及整体商业战略，以弄清他们为什么似乎在优化某些正在削弱核心用户体验的东西。  \n首先，让我们来看一些商业背景，帮助我们理解为什么Spotify可能在UI中更加突出某些部分（**咳咳** 播客 **咳咳**）。\n\n# Spotify艰难的盈利之旅 🥴\n\n我在去年11月（2023年）撰写了[Spotify重返盈利](https://medium.com/user-experience-design-1/how-spotify-returned-to-profitability-in-2023-19e45c0e87e0) 的文章。这是自2021年以来音乐流媒体服务首次报告盈利。  \n去年全年，它[裁减了17%的员工](https://www.bbc.co.uk/news/business-67611361) 和大量的市场营销支出。  \n它还提高了价格。多年来，Spotify的月订阅费一直是9.99美元，直到2023年7月，主要市场的价格上涨了1美元](https://www.theverge.com/2023/7/24/23805364/spotify-us-price-increase-10-99-a-month-9-99-month-twelve-years)。在2024年，他们[再次将价格提高了1美元](https://www.theverge.com/2024/6/3/24170301/spotify-us-price-increase-plans)。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/0*BK5a3skfF42SCEjT.jpg)  \nSpotify 价格上涨邮件（来源: [The Verge](https://www.theverge.com/2024/6/3/24170301/spotify-us-price-increase-plans)）\n\n这些成本削减和价格上涨确实产生了影响，[Spotify的第二季度财报](https://newsroom.spotify.com/2024-07-23/spotify-reports-second-quarter-2024-earnings/#:~:text=Subscribers%20increased%2012%25%20Y%2FY,improved%20to%20%E2%82%AC266%20million.) 表示：  \n*得益于健康的订阅者增长、货币化的改善以及创纪录的盈利，Spotify报告…*  \n**月活跃用户** *同比增长14%，达到6.26亿*  \n**订阅者** *同比增长12%，达到2.46亿*  \n**总收入** *同比增长20%，达到38亿欧元*  \n**毛利率** *达到29.2%*\n\n对于那些不太关注商业的人来说，这里有几个*非常* *有趣* 的点👀：  \n**1** **月活跃用户增长比订阅者多**，表明从免费到付费的转换率在下降  \n**2** **总收入增长比订阅者多**，表明价格上涨推动了每用户平均收入（ARPU）的增长。也就是说，ARPU的增长几乎和订阅者增长一样驱动了盈利  \n**3** **毛利率比去年提高了约5%**。这是因为Spotify的播客业务成本降低**，**比如减少了播客独家授权的支出（例如不再花大钱让人们像乔·罗根那样只在一个平台上播出）。根据CEO Daniel Ek的说法：“播客业务去年还是拖累。现在它是我们的另一个利润中心。”\n\n这些数据表明，Spotify是一家**更好的公司**，但不一定是一个更好的产品。  \n鉴于数字的普遍乐观，他们开始有点大手大脚了。  \n[CEO最近分享](https://www.bbc.co.uk/news/business-68884501)说，他们不会“在全年恢复一些市场营销支出……因为我们希望继续增长，我们发现，在某些地区，我们可能削减得太多了。” 他们还[正在招聘67个职位](https://www.lifeatspotify.com/jobs)，覆盖欧洲、亚洲和北美。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2apM00zj17XeXdodnvKCVw.png)  \n来源: https://www.lifeatspotify.com/jobs\n\n## 我为什么告诉你这些？\n\n随着播客成为公司的利润驱动因素，成本削减占据了重要地位，以及感觉越来越难找到歌曲，我接下来要展示的内容将更容易理解。  \n现在，进入有趣的部分：用户体验。\n\n# Spotify的首页体验\n\n有没有人和我有同样的感觉：  \n最近每次打开Spotify，我都感到迷失和困惑。**同时感到不知所措和不够满足。**  \n这是一种难以形容的感觉。  \n我在想这是否只是我自己，是否是因为我没有正确地策划我的音乐。  \n但我不这么认为。  \n当我每天早上打开Spotify桌面应用时，我看到的是：  \n* ~20%的页面用于我的库（并且没有选项可以打开它，只能关闭）  \n* ~50%的屏幕被两个推荐的轮播图占据（都是Spotify生成的推荐）  \n* ~20%的屏幕用于最近播放的内容（我可以按全部、音乐、播客或有声书进行筛选）\n\n⠀![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*QgwG9SAYuwbJ6US9HnQ_cg.png)  \n快速浏览这个屏幕，没有什么大问题。这就是为什么我花了这么长时间才意识到是什么导致了我的决策瘫痪和挫败感。  \n但仔细一看，你会发现主视图中的20张卡片中**有13张是Spotify生成的内容**。没有我喜欢的艺术家，最喜欢的播客被放在了页面下方的滚动区域里。  \n这不是一个让我感到**有用**或**熟悉**的页面。  \n它感觉更像是陌生的。  \n如果你眯起眼睛，你会看到屏幕上挤满了大量内容，*真的太多了*。  \n在每个部分中，我开始看到问题所在：  \n* **我的库：** 它感觉杂乱无章。混合在一起。我不知道其中许多播放列表是怎么出现的；我不记得按下了❤，但后来意识到它不再存在。它不再感觉是‘我’的或策划好的。\n* **你可能喜欢的节目：** 在这里的6个节目中，我可能只对1个感兴趣。我对历史或美国不感兴趣。最后一个我可能会尝试，但其他的都是坚决的否定。我很好奇这些是如何被选中的。\n* **为 Rosiehoggmascall 定制的：** 这6个节目中有5个是每日混音。里面有什么？不确定。我通常随意选择这些，并跳过直到找到合适的。然后是AI DJ，我总共只用过一次。\n\n⠀当我询问朋友和家人时，情况也是一样的。  \n如[Billy](https://www.linkedin.com/in/william-hoggmascall-893614291/?originalSubdomain=uk)所说：  \n*最近我怎么找到新专辑？如果我\n\n搜索新音乐，得到的只是播放列表。我的首页全是播放列表、播放列表混音、播放列表。*  \n这就是我的感觉。播放列表泛滥。\n\n## 最近的首页更新 👀\n\n就在我写这篇文章时，我在Spotify桌面上看到一个弹窗：  \n***首页占据中心舞台！***  \n*你现在可以在顶部找到首页和搜索，以便更顺畅的导航体验。*  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*cNAj6gaQuLG5RfzAR6OoeA.png)  \n令人兴奋！我想。做了一些改变。  \n幸运的是，我前一天截了屏，所以可以看到更新改变了什么。  \n那就是… 鼓声🥁🥁🥁  \n并没有太大变化。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*wDRYwV3-exdWmordaKoBxA.png)  \n事实上，将搜索栏移回顶部导航栏，是对2017年导航的一个回归。  \n我在网上爬了一些资料，找到了下面三张2017年、2021年及之后的截图，***我真的很高兴我找到了这些。***  \n现在与当时相比，有很大的不同，这帮助我看清了我最初分析中错过的部分。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*rlX6-ly42iGWBpJ28K5Yyw.png)  \n2017年[来源](https://vadosware.io/post/spotifys-2017-web-app-redesign/)，2021年[来源](https://beebom.com/spotify-new-desktop-ui-how-to-enable-disable-it/)，2024年来源（我的桌面）  \n在早期**，Spotify 是关于音乐的。** 在2017年的UI中，我可以在左侧窗格中看到**歌曲、专辑、播放列表和艺术家**，在中间窗格中可以看到排行榜、流派和新发布的内容，以及在右侧的朋友的聆听记录。  \n只需一击即可进入艺术家页面，一击即可进入专辑页面。  \n当我眯起眼睛时，桌面并没有让人感到不知所措，尽管它满满当当。它感觉温馨、随意、舒适、可识别、细致而清晰。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*8QwRI2z2s0-wEwEzxH1Fhw.png)  \n2017年顶部和左侧导航栏（[来源](https://vadosware.io/post/spotifys-2017-web-app-redesign/)）\n\n快进到2021年，我们看到的是时尚现代的感觉。  \nUI有现代感。更具斯堪的纳维亚风格。  \n它简约、酷炫、干净，但它仍然很有用。它仍然包括一键访问我的艺术家、专辑和播放列表。虽然功能简化了，但仍然保留了之前的所有功能和入口点。只是经过了面部提升。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*rIsd3BlqCpxeahKbxnYIew.png)  \n2021年顶部和左侧导航栏（[来源](https://bootcamp.uxdesign.cc/ux-content-strategy-audit-spotify-aeabcfa10f4d)）\n\n快进到现在，这是一个视觉上的过载。一个接一个地向我扔推荐内容的缩略图，但没有一个真正合适。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Y9DAQY8WS-a-t8DlNu2YRw.png)  \n2024年顶部和左侧导航栏（我的桌面）  \n视觉上很难专注于某个特定部分。  \n当我想进入艺术家或专辑页面时，需要点击多次才能到达。我看到的是播客和Spotify播放列表被优先展示。  \n当我向下滚动我的首页时，情况也是一样的。\n\n# 推荐、推荐，更多的推荐\n\n在滚动页面以下的部分，答案是一些有用的内容和更多的相似内容：  \n1 你可能喜欢的节目（折叠顶部）：即一些奇怪选择的播客  \n2 为 Rosie Hoggmascall 定制的：Spotify生成的播放列表  \n3 最近播放的（有用的，但我已经陷入回声室，其中5/6是Spotify播放列表）  \n4 你的顶级混音：全是Spotify播放列表  \n5 你的节目：终于有一些有用的选择  \n6 推荐电台：又是Spotify生成的播放列表  \n7 热门新声音：更多的Spotify生成的播放列表（但伪装得更人性化）  \n8 新剧集：一个有用的选择  \n9 类似的更多（最近的播客剧集）：没有一个我会选择  \n10 为你推荐的剧集：一个好的和随机的播客混合\n\n⠀![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*gBKWRX7sZ3kTdzPJTAge4w.png)  \n在60个缩略图中：  \n* 31个是播客  \n* 29个是Spotify生成的播放列表\n\n⠀哇。  \n我的首页上52%是播客，48%是Spotify生成的内容。没有一个专辑。没有一个艺术家。  \n这些块每天都会变化，但这种分裂基本保持不变。  \n播客占我每周聆听时间的5%左右：我每周听1-2小时的播客，而每天听4小时的音乐（每周20小时）。  \n这是一个20:1的音乐对播客比率，而Spotify的首页是1:1。很明显，播客被大力推送。  \n如果播客的推送方式如此远离用户的聆听行为，那么必然有其他动机。  \n根据第二季度的财报，以及播客如何成为Spotify的“利润中心”，收入必须是Spotify现在的指导性指标。  \n因此，我被如此强烈地推送到播客。  \n更多的播客收听，鼓励更多的节目和更多的播客广告，这意味着更多的播客广告收入。  \n在这种情况下，我不禁想知道Spotify生成的播放列表中的歌曲分布是否为他们节省了成本？  \n如果专注于收入和效率作为指标，是否导致Spotify在商业价值上过度偏重，而在用户价值上有所忽视？  \n在[纽约客](https://www.newyorker.com/culture/infinite-scroll/why-i-finally-quit-spotify)的文章中，[Kyle Chayka](https://www.newyorker.com/contributors/kyle-chayka) 引用了[Jarrett Fuller](https://jarrettfuller.com/about/#:~:text=He%20is%20an%20assistant%20professor,design%20podcast%20Scratching%20the%20Surface.)，他是北卡罗来纳州立大学的一名设计师和教授，说：  \n“在过去的十年里.. “以用户为中心”的设计方法已被“以公司为中心”的方法所取代。它不再优化用户体验，而是优化利润的提取。如果Spotify成功地将我们都变成被动的听众，那么平台授权的内容到底是什么其实并不重要。”  \n查看他们的[年度音乐经济报告](https://loudandclear.byspotify.com/#introduction)，很明显，“降低进入门槛”和“每个层级赚更多的钱”的信息贯穿整个报告。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*BiUfSSM7iCXkvQl2V0w7DA.png)  \n来源: [https://loudandclear.byspotify.com/](https://loudandclear.byspotify.com/)\n\n我不反对更多的人谋生。这很棒。  \n我反对的是，作为一个用户，我找不到我想听的歌曲或我喜欢的艺术家。  \n从核心用户的角度来看，公司必须确保他们在提供用户价值和商业价值两者上都表现出色。  \nSpotify生成的播放列表正是导致我回声室的原因。我询问了身边的朋友，他们也有同感：  \n*算法绝对只是在重复我已经表示不喜欢并一次又一次地驳回的歌曲。底部推荐的歌曲总是相同的。我会反复刷新，但如果我切换出再切换回，界面又恢复到最初相同的歌曲。他们基本上有一个‘我们认为你会喜欢的’歌曲长列表，他们假装刷新了，但实际上他们只是下拉到下一个部分。因此我最终面对的是我不想要的歌曲之墙。*  \n[Doug Ford](https://www.linkedin.com/in/dougford/)，Spotify前音乐文化与编辑总监在[采访](https://www.newyorker.com/culture/infinite-scroll/why-i-finally-quit-spotify)中甚至说：  \n“被泛泛的建议和最近聆听的重复内容轰炸，听众被训练依赖Spotify提供的内容，而不是自己寻找内容。“你给他们的一切都是他们认为自己喜欢的，但这一切都被同质化了。”  \n在Spotify上发现新音乐变得如此困难，以至于人们开始转向其他产品。当我在Reddit上寻求建议时，建议是转到其他平台：  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*pIZdrvmLKTOqqm0eMj9dkA.png)  \n例如Swipeify\n\n，一款类似Tinder的产品，学习你的品味并建议新音乐。  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*1b43wJYyrsR4L2TruhyB0w.png)  \n[Swipefy](https://apps.apple.com/us/app/swipefy-for-spotify/id6449814769)  \n在Spotify的推荐中，我正在变得对自己的品味越来越陌生。我不知道我喜欢什么，只知道当它播放在我耳朵里时我不喜欢什么。  \n然后当我去搜索时，很难找到我想要的东西。\n\n# 搜索体验：像在厚泥中跋涉\n\n我们在搜索中看到了相同的模式。  \n当我在手机上搜索Britney时，我得到的是：  \n1 艺术家资料（需要再点击一次才能进入她的音乐）  \n2 带有Britney的Spotify播放列表  \n3 带有Britney的有声书（？！）  \n4 带有Britney的播客（？！）\n\n⠀![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*G_sz5pCr6YLfGCWLJl55ag.png)  \n在移动端和桌面端的搜索体验中，我：  \n* 1次点击即可进入播客、有声书和AI生成的播放列表  \n* 2次或以上点击才能进入我曾经熟悉的艺术家页面\n\n⠀我并不孤单。  \n有些人甚至[回归黑胶唱片](https://medium.com/the-slow-life/bye-bye-spotify-37bb823839d2)。  \n再次，在搜索体验中我们看到Spotify优先考虑的是利润而不是产品。商业需求超过了用户需求。  \n过去，我可以轻松搜索Britney并找到她的歌曲的日子已经不复存在。  \n现在，我被困在用户界面的摩擦中，无法轻松找到真正的艺术家、专辑和歌曲。  \n现在被称为‘[恶化效应](https://en.wikipedia.org/wiki/Enshittification)’的产品现象。\n\n# 结论：像在雪地上滑雪🛷🛷\n\n写这篇文章很困难。我花了一段时间才注意到，但一旦注意到，感觉就像一场海啸。  \n我从享受这个平台，变成了现在每天都觉得它很烦人。  \n接下来呢？  \n也许是黑胶唱片。  \n也许我会继续使用它。我现在是一个懒惰的听众，陷入了一种音乐类型的深渊中，毫无动力逃脱。  \n敬lo-fi到最后🥂  \n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*hA7Ah7FzbgWLLNgXazMNMA.png)  \n\n*你好，我是Rosie 👋 我每周写关于产品、增长和UX的深入分析。通过订阅 [growthdives.com](https://growthdives.com/)，提前一周收到我的深入分析 🕺 尽情享受！*\n"},545:function(n,t,e){"use strict";e.r(t),t["default"]="+++\ntitle = '响应网页设计 & 跨平台设计'\ndate = 2024-09-09\n+++\n\n响应式网页设计（Responsive Web Design，简称RWD）是一种网页设计技术，旨在使网页能够根据用户设备的屏幕大小、分辨率和方向自动调整布局，从而在各种设备上（如手机、平板、笔记本和桌面电脑）提供最佳的用户体验。\n\n### 核心概念：\n\n#### 1. 流式布局 （Fluid Grid）：\n通过相对单位（如百分比或 `vw`、`vh`）而非固定的像素单位来定义页面元素的宽度和高度，使其随屏幕大小的变化而变化。\n\n#### 2. 弹性图片与媒体（Flexible Images and Media）：\n图片和视频等媒体内容的尺寸随容器大小调整，通常通过 `max-width: 100%` 来确保媒体不会超出其容器范围。\n\n#### 3. 媒体查询 （Media Queries）：\n使用 CSS 的 `@media` 规则，根据设备的不同属性（如屏幕宽度、分辨率）应用不同的样式，使页面在各种设备上显示最佳效果。例如：\n\n### Demo: **Multi-Column Layout**\n[查看瀑布布局 & 响应式网页设计](https://nagisa77.github.io/Vue-example/#/multi_column_layout)\n\n![](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/%E5%93%8D%E5%BA%94%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%26-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1-1-95D87AF5-8C79-445F-A619-115D4587E7FA.mov)\n\n### Demo: **Navbar**\n[查看NavBar的响应式布局实现](https://nagisa77.github.io/Vue-example/#/navigation_bar)\n\n![](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/%E5%93%8D%E5%BA%94%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%26-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1-0-85FF321E-9BAE-438E-B739-736AD10E2707.mov)\n\n\n### 代码示例：\n以下是一个简单的响应式布局代码，通过媒体查询为不同的屏幕宽度定义了不同的列数：\n\n```css\n/* 响应式布局 */\n@media (min-width: 600px) {\n  .masonry {\n    column-count: 3;\n  }\n}\n\n@media (min-width: 350px) and (max-width: 599px) {\n  .masonry {\n    column-count: 2;\n  }\n}\n\n@media (max-width: 349px) {\n  .masonry {\n    column-count: 1;\n  }\n}\n```\n\n但是给我们的思考比较关键 — 设计网页的时候，需要考虑多种设备，多种页面比例，为每种页面比例做定制处理。不然，网页的设计只会在设计师的电脑上好看 :)"},9701:function(n,t,e){"use strict";e.r(t),t["default"]="+++\ntitle = '做一个网站之前，需要提前考虑什么（用户体验、前端初始化构建）？'\ndate = 2024-09-11\n+++\n\n## user experience 的五个步骤\n\n设计过程可以分为五个关键步骤：共情、定义、构思、原型设计和测试。这些步骤帮助设计师从用户需求出发，逐步形成一个完整的设计方案。\n\n### 1. 共情\n\n共情是设计的第一步，重点是理解用户的需求和痛点。设计师通过访谈、问卷调查等方式，深入了解用户的使用场景，掌握他们的期望和挑战。通过竞品分析，还可以进一步了解市场现有产品的优缺点，为设计提供更多参考。\n\n### 2. 定义\n\n定义阶段是将收集到的用户信息整理归纳，并确定最重要的用户问题。设计师需要明确用户画像，列出他们的需求清单，并以此为基础构建问题陈述。这一步确保设计过程中始终关注用户的核心需求，从而有针对性地解决实际问题。\n\n### 3. 构思\n\n构思是一个创意爆发的阶段。设计师通过头脑风暴提出尽可能多的解决方案，而不局限于现实可行性。常用的方法包括“我们如何才能……”的问题形式以及竞品审查，帮助团队从不同角度探讨可能的设计方案。\n\n### 4. 原型设计\n\n原型设计是将构思阶段的想法转化为可视化的设计模型。设计师通常从低保真模型开始，通过线框图等工具迅速搭建产品结构，并展示信息架构。原型是获取用户反馈的重要工具，可以帮助设计师在正式产品开发之前进行多轮优化。\n\n### 5. 测试\n\n测试是设计的最后一个阶段，设计师通过用户测试来验证原型的可用性。通过实际用户的操作和反馈，设计师可以发现产品中的不足，并进行改进，确保最终的产品能够满足用户需求并带来良好的体验。\n\n这五个步骤相辅相成，形成了一个完整的设计闭环，确保设计师在每一步都考虑到用户的需求和反馈。\n\n## Web\n\n### 1. 提前做好响应式的布局\n\n如何做好响应式布局，可以看我的文章 [响应式布局指南](https://nagisa77.github.io/posts/rwd/)，里面有较为详细的解释。\n\n### 2. 提前做 i18n 策略\n\n#### 什么是 i18n 策略？\n\ni18n 策略指的是国际化（Internationalization）策略，旨在使应用程序能够适应不同国家和地区的语言、文化和地区设置，而不需要对代码进行大规模修改。\n\n#### 在 Vue 中做 i18n 策略\n\n安装好必要的依赖：\n\n```bash\nnpm install vue-i18n\n```\n\n在 `main.js` 中使用 `i18n`：\n\n```javascript\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport { createI18n } from 'vue-i18n';\n\nimport en from './locales/en.json';\nimport zh from './locales/zh.json';\n\nconst getBrowserLanguage = () => {\n  const lang = navigator.language || navigator.userLanguage;\n  return lang.includes('zh') ? 'zh' : 'en'; // 简单示例，可以扩展更多语言\n};\n\n// 创建 i18n 实例\nconst i18n = createI18n({\n  locale: getBrowserLanguage(), // 默认语言为用户浏览器的语言\n  fallbackLocale: 'en', // 如果找不到对应的翻译，使用的默认语言\n  messages: {\n    en,\n    zh,\n  },\n});\n\nconst app = createApp(App);\napp.use(i18n);\napp.mount('#app');\n```\n\n在页面中根据不同语言返回：\n\n```vue\n<template>\n  <h1>{{ $t('greeting') }}</h1>\n  <h2>{{ $t('message.hello') }}</h2>\n</template>\n\n<script>\nexport default {\n  name: 'i18nPage',\n};\n<\/script>\n```\n\n`src/locales/en.json` 示例：\n\n```json\n{\n  \"greeting\": \"Hello\",\n  \"message\": {\n    \"hello\": \"This is my I18N page\"\n  }\n}\n```\n\n示例页面: [i18n 页面示例](https://nagisa77.github.io/Vue-example/#/i18n)\n\n### 3. 提前做深色模式策略 — css 变量\n\n#### 创建全局 CSS\n\n`src/assets/styles/global.css`:\n\n```css\n:root {\n  --background-color: #ffffff;\n  --text-color: #000000;\n  --card-background-color: #f5f5f5;\n}\n\n[data-theme=\"dark\"] {\n  --background-color: #333333;\n  --text-color: #ffffff;\n  --card-background-color: #444444;\n}\n```\n\n在 `main.js` 中导入全局 CSS:\n![做一个网站之前，需要提前考虑什么（用户体验、前端初始化构建）？](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/做一个网站之前，需要提前考虑什么（用户体验、前端初始化构建）？.png)\n\n在实际页面中运用: \n![做一个网站之前，需要提前考虑什么（用户体验、前端初始化构建）？-1](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/做一个网站之前，需要提前考虑什么（用户体验、前端初始化构建）？-1.png)\n\n#### 在实际页面中运用深色模式：\n\n页面示例: [深色模式示例页面](https://nagisa77.github.io/Vue-example/#/night_mode)\n\n\n## 结论\n\n通过以上步骤，可以提前做好响应式布局、国际化和深色模式等用户体验策略，从而在开发过程中更加高效地实现这些功能。\n"},4127:function(n,t,e){"use strict";e.r(t),t["default"]='+++\ntitle = VPS 服务器搭建 — ChatGPT中转站\ndate = 2024-08-29\n+++\n\n在本教程中，我们将详细介绍如何在 VPS 服务器上搭建一个中转站，用于绕过网络限制访问 OpenAI 的 ChatGPT 服务。我们会一步步进行从购买服务器到配置域名、安装必要的软件和工具，以及最后的伪装配置，以确保你的服务器能够稳定且安全地运行。\n\n#### 购买一台云服务器(香港)\n首先，我们需要购买一台位于香港的云服务器（步骤省略）。\n\n#### 云服务器里边配置 SSH Key，方便后续使用\n为了便于日后的登录操作，我们需要配置 SSH Key 认证：\n\n```bash\n❯ vim ~/.ssh/authorized_keys\n```\n将本机的 `~/.ssh/id_rsa.pub` 内容添加到此文件中即可。\n\n#### 测试对于 OpenAI 的可访问性\n测试从你的 VPS 服务器是否可以访问 OpenAI 的 ChatGPT 服务。以 Safari 浏览器为例，使用快捷键 `⌥+⌘+u` 访问 `https://chat.openai.com`。\n\n![无法访问 OpenAI](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/vps.png)\n\n可以看到无法直接访问。我们可以使用 curl 工具进行进一步测试：\n\n```bash\ncurl https://chat.openai.com\n```\n\n![终端访问测试](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/vps1.png)\n\n在 macOS 终端中测试时，表现为卡死状态。\n\n![香港服务器测试](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/vps2.png)\n\n在香港服务器中，执行 curl 命令后需要输出 binary，可以看到确实有响应。为进一步验证响应内容，在命令后添加 `--output -`：\n\n![验证响应](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/vps3.png)\n\n结果表明响应是 OK 的。\n\n#### 购买域名，将域名和 VPS 地址绑定\n接下来，我们需要为你的 VPS 服务器购买一个域名，并将其绑定到服务器的 IP 地址。你可以在 [NameSilo](https://www.namesilo.com/) 购买域名。\n\n![购买域名](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/vps4.png)\n\n购买完成后，配置域名的 DNS 解析，将其指向 VPS 的 IP 地址：\n\n![配置 DNS 解析](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/vps5.png)\n\n过一段时间后，使用 ping 命令验证解析是否正确：\n\n![验证解析](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/vps6.png)\n\n如果解析正确，那么你的域名已经成功指向了 VPS 服务器。\n\n### 正式搭建\n\n在此步骤中，我们将开始安装和配置服务器上的必要工具和软件。\n\n#### 启用 BBR TCP 拥塞控制算法\n为了优化网络性能，我们将启用 BBR TCP 拥塞控制算法：\n\n编辑 `/etc/sysctl.conf` 文件，添加以下两行：\n\n```bash\nnet.core.default_qdisc=fq\nnet.ipv4.tcp_congestion_control=bbr\n```\n\n然后运行以下命令：\n\n```bash\n❯ sudo sysctl -p\n```\n\n#### 安装 Nginx\nNginx 是一个高效的反向代理服务器和 Web 服务器，我们需要安装它来处理流量：\n\n```bash\n❯ sudo apt install nginx\n```\n\n#### 安装 acme.sh\nacme.sh 是一个自动化的证书管理工具，我们将使用它来申请并管理 SSL 证书：\n\n```bash\n❯ curl https://get.acme.sh | sh\n```\n\n然后添加一个软链接以方便使用：\n\n```bash\n❯ sudo ln -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh\n❯ source ~/.bashrc\n```\n\n切换 CA 机构到 Let\'s Encrypt：\n\n```bash\n❯ acme.sh --set-default-ca --server letsencrypt\n```\n\n申请 SSL 证书：\n\n```bash\n❯ acme.sh --issue -d 你的域名 -k ec-256 --webroot /var/www/html\n```\n\n安装 SSL 证书：\n\n```bash\n❯ acme.sh --install-cert -d 你的域名 --ecc --key-file /etc/x-ui/server.key --fullchain-file /etc/x-ui/server.crt --reloadcmd "systemctl force-reload nginx"\n```\n\n#### 安装 x-ui\nx-ui 是一个功能强大的图形界面工具，用于管理和配置代理服务器：\n\n```bash\n❯ bash <(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)\n```\n\n#### 寻找「伪装」站点，防止 GFW 检测\n为了避免服务器 IP 被 GFW（防火长城）检测并封禁，我们需要设置伪装站点。这一步非常重要。可以通过 Google 搜索相关站点，例如：\n\n```bash\n❯ intext:登录 Cloudreve\n```\n\n找到这个站点：http://www.leftblogs.ml\n\n#### 配置 X-ui\n最后一步是配置 Nginx 和 X-ui，使其能够正确处理流量并提供伪装功能。替换 VPS 上的 `/etc/nginx/nginx.conf` 文件内容为以下配置：\n\n```nginx\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    gzip on;\n\n    server {\n        listen 443 ssl;\n        server_name nicename.co;  # 你的域名\n        ssl_certificate /etc/x-ui/server.crt;  # 证书位置\n        ssl_certificate_key /etc/x-ui/server.key;  # 私钥位置\n\n        ssl_session_timeout 1d;\n        ssl_session_cache shared:MozSSL:10m;\n        ssl_session_tickets off;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_prefer_server_ciphers off;\n\n        location / {\n            proxy_pass https://bing.com;  # 伪装网址\n            proxy_redirect off;\n            proxy_ssl_server_name on;\n            sub_filter_once off;\n            sub_filter "bing.com" $server_name;\n            proxy_set_header Host "bing.com";\n            proxy_set_header Referer $http_referer;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header User-Agent $http_user_agent;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto https;\n            proxy_set_header Accept-Encoding "";\n            proxy_set_header Accept-Language "zh-CN";\n        }\n\n        location /ray {  # 分流路径\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:10000;  # Xray 端口\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection "upgrade";\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n\n        location /xui {  # xui 路径\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:9999;  # xui 监听端口\n            proxy_http_version 1.1;\n            proxy_set_header Host $host;\n        }\n    }\n\n    server {\n        listen 80;\n        location /.well-known/ {\n            root /var/www/html;\n        }\n        location / {\n            rewrite ^(.*)$ https://$host$1 permanent;\n        }\n    }\n}\n```\n\n在域名和 x-ui 端口号中配置端口映射。\n\n重新加载 Nginx 配置文件：\n\n```bash\n❯ systemctl reload nginx\n```\n\n然后访问以下地址进行配置：\n\n```bash\nhttps://nagisa10086.top/a9937e29-6197-450d-fe08-002ee2182da1-xui/xui/\n```\n\n> 后续进展：发现腾讯香港服务器已经被 GPT 拉黑了，计划更换为亚马逊服务器继续搭建。\n\n---'},1590:function(n,t,e){"use strict";e.r(t),t["default"]="+++\ntitle = 'Why Blogs'\ndate = 2024-08-29\n+++\n\n### 为什么我要搭建个人博客\n\n作为一名刚毕业两年的程序员，我觉得有一个个人博客是个不错的主意。首先，这是我在数字世界里展示自己的方式之一。要在这个信息泛滥的时代脱颖而出，让别人迅速了解你，一个博客链接无疑是最快捷的途径。它可以是我的线上名片，不论是求职还是与同行交流，丢个链接过去，别人就能一览我的想法和技术积累。\n\n其次，搭建博客也是我提升技术的好机会。通过这个项目，我可以实践全栈开发，从前端的美化设计，到后端的逻辑实现，甚至服务器的部署与优化，每一步都能帮助我更深入地理解技术。未来，我打算重构这个博客，让它真正成为我个人风格的代表作品。毕竟，自己设计、自己开发、自己部署的东西，最能体现个人的能力和审美。\n\n当然，博客还承载着我成长和思考的记录。工作中的一些问题、解决问题的过程、对新技术的探索，这些都是值得记下来的东西。通过写博客，我可以更系统地整理这些思考，回头看的时候，也能感受到自己的成长和进步。\n\n最有趣的地方是，博客还可能带来一些意想不到的收获。随着内容的不断丰富，也许会有更多志同道合的人发现这个小角落。大家可以在这里分享心得、交流经验，甚至可能碰撞出一些合作的火花。\n\n这就是我决定搭建个人博客的理由。今天是个起点，虽然这篇博客只有寥寥几句，但它意味着我开始在数字世界里留下自己的足迹。今后，我会在这里持续分享更多内容，也希望这个博客能在我的职业生涯中，成为一块有趣且有用的积木。期待未来有更多的相遇和交流！"},7447:function(n,t,e){"use strict";e.r(t),t["default"]="+++\ntitle = '关于图床'\ndate = 2024-08-29\n+++\n\n### 什么是图床？\n**图床**（Image Hosting Service）是指专门用于存储和管理图片的在线服务。用户可以将图片上传到图床，然后获取一个图片的外链 URL，这个 URL 可以嵌入到其他网页、博客、社交媒体、论坛等地方，用于展示图片而不需要将图片文件直接保存在这些平台上。\n\n### 什么情况需要用图床？\n图床是专门用于存储和管理图片的在线服务，用户可以将图片上传到图床，然后获取图片的外链 URL，用于在其他网页、博客、社交媒体等地方展示图片。使用图床可以减少网站服务器的负担，因为图片存储在图床服务提供商的服务器上，减少了你自己服务器的存储空间和带宽消耗，从而提升网站的加载速度和性能。优质的图床通常使用内容分发网络（CDN），能够在全球范围内快速加载图片，提升用户体验。当你需要在多个平台上共享和分发同一张图片时，图床提供的外链 URL 可以方便地实现跨平台展示，而无需重复上传图片。此外，图床还可以作为图片的存档和备份方式，确保图片在原始存储位置出现问题时不会丢失。\n\n### 我自己的案例\n我搭建了一个博客 http://nagisa77.github.io/ ，但是由于GitHub.io 下载速率的限制，我把图片都部署到GitHub上面了，加载奇慢，严重影响体验；之后选择腾讯云COS作为图床，效果就好非常多了，虽然页面数据搭载在GitHubio，但是图片在腾讯云，可以做到秒开。\n\n此外我还想之后做自己的网站，也可以利用这个图床去做（10元/年）。费用还行。\n\n![关于图床的探究](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/关于图床的探究.png)\n\n#### 腾讯云 COS 图片的上传和下载\n\n- **上传**\n\n  ![关于图床的探究-1](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/关于图床的探究-1.png)\n\n  对于博客场景，因为是“大家都可以访问我的博客”，也可以直接设置成公有读私有写。\n\n  ![关于图床的探究-2](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/关于图床的探究-2.png)\n\n- **下载**\n\n  下载只要用访问域名+文件后缀即可直接下载。\n\n  ![关于图床的探究-3](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/关于图床的探究-3.png)\n\n  把图片链接弄在Markdown中直接部署。\n\n  ![关于图床的探究-4](https://blog-1307107697.cos.ap-shanghai.myqcloud.com/关于图床的探究-4.png)\n\n  这样就可以实现托管在GithubIO的博客秒开啦～\n\n### 图床的工具 uPic\nuPic 可以实现绑定认证后，在本地上传图片，而无需打开网页。\n\n### 图床的思考\n\n本质是一种解耦的思维。作为开发者最忌讳的是重复造轮子；比如我完全可以写一套代码，部署在自己服务器上，实现图片的增删查改；但是不如每个月0.8元，让腾讯云托管我的服务；另外如果我的服务器部署了自己手写的“类图床”，也会吃到下行流量，其次就还有性能方面瓶颈。\n\n让我想到微信小程序的一些设施 — 云函数、云存储等等，其实都是如此。开发者只要提交逻辑，后台服务的繁琐部署都免去了，这也是一种解耦的思维的实践。你只要交19元/月，省去大量配置成本。\n\n程序员本质是搬砖，但是践行着“少写代码多思考”的主题思维，又会不知不觉间想开通各种云服务，本质想要“用钱买重复劳动力”。这像是一种有趣的悖论，所以有没有可能把业务逻辑外包给大学生写是更好的选择？"},1800:function(n,t,e){"use strict";var o=e(5130),s=e(6768),i=e(4232);const a={class:"site"},r={class:"site-header-desktop"},c={class:"site-header-mobile"},p={class:"site-content"};function l(n,t,e,o,l,u){const m=(0,s.g2)("HeaderContent"),d=(0,s.g2)("Menu"),h=(0,s.g2)("el-icon"),g=(0,s.g2)("router-view");return(0,s.uX)(),(0,s.CE)("div",a,[(0,s.Lk)("header",r,[t[0]||(t[0]=(0,s.Lk)("h1",{class:"header-text header-title"},"Tim's Blog",-1)),(0,s.bF)(m,{onRouteClicked:u.closeMenu},null,8,["onRouteClicked"])]),(0,s.Lk)("header",c,[t[1]||(t[1]=(0,s.Lk)("h1",{class:"header-text header-title-mobile"},"Tim's Blog",-1)),(0,s.bF)(h,{size:"30",class:"header-menu-icon",onClick:u.toggleMenu},{default:(0,s.k6)((()=>[(0,s.bF)(d)])),_:1},8,["onClick"])]),(0,s.Lk)("div",{class:(0,i.C4)(["header-content-mobile",{"menu-visible":l.menuVisible}])},[(0,s.bF)(m,{onRouteClicked:u.closeMenu},null,8,["onRouteClicked"])],2),(0,s.Lk)("div",p,[(0,s.bF)(g)])])}const u={class:"header-content"},m={class:"header-text header-route"};function d(n,t,e,o,a,r){const c=(0,s.g2)("TypingEffect"),p=(0,s.g2)("router-link");return(0,s.uX)(),(0,s.CE)("div",u,[(0,s.bF)(c,{class:"header-text header-subtitle",strings:e.strings},null,8,["strings"]),(0,s.Lk)("div",m,[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(e.routes,(n=>((0,s.uX)(),(0,s.CE)("li",{key:n.name,class:"header-route-item"},[(0,s.bF)(p,{to:n.path,onClick:t=>r.handleRouteClick(n.name)},{default:(0,s.k6)((()=>[(0,s.eW)((0,i.v_)(n.name),1)])),_:2},1032,["to","onClick"])])))),128))])])}const h={ref:"typed"};function g(n,t,e,o,i,a){return(0,s.uX)(),(0,s.CE)("div",null,[(0,s.Lk)("span",h,null,512)])}var f=e(7891),y={name:"TypingEffect",props:{strings:{type:Array,required:!0},typeSpeed:{type:Number,default:50},backSpeed:{type:Number,default:50},loop:{type:Boolean,default:!0}},mounted(){const n={strings:this.strings,typeSpeed:this.typeSpeed,backSpeed:this.backSpeed,loop:this.loop};new f.A(this.$refs.typed,n)}},b=e(1241);const w=(0,b.A)(y,[["render",g]]);var v=w,k={components:{TypingEffect:v},props:{strings:{type:Array,default:()=>["在离开之前，一切都是过程. ","追求自由～ "]},routes:{type:Array,default:()=>[{name:"首页",path:"/"},{name:"链接🔗",path:"/links"}]}},methods:{handleRouteClick(n){this.$emit("route-clicked",n)}}};const _=(0,b.A)(k,[["render",d],["__scopeId","data-v-32ba27a0"]]);var S=_,x={components:{HeaderContent:S},data(){return{menuVisible:!1}},methods:{toggleMenu(){this.menuVisible=!this.menuVisible},closeMenu(){this.menuVisible=!1}}};const A=(0,b.A)(x,[["render",l],["__scopeId","data-v-c2f608bc"]]);var E=A,D=e(1387);const C={class:"scroll-view-container"},I={class:"scroll-view"},T={class:"multi-column-layout"},L={class:"content-container"},q={class:"masonry"},B=["src","alt"],W={style:{padding:"18px"}},z={class:"content-card-text"},O={class:"content-card-date"};function P(n,t,e,o,a,r){const c=(0,s.g2)("Calendar"),p=(0,s.g2)("el-icon"),l=(0,s.g2)("router-link");return(0,s.uX)(),(0,s.CE)("div",C,[(0,s.Lk)("div",I,[t[0]||(t[0]=(0,s.Lk)("div",{class:"overlay"},null,-1)),(0,s.Lk)("div",T,[(0,s.Lk)("div",L,[(0,s.Lk)("div",q,[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(a.articles,((n,t)=>((0,s.uX)(),(0,s.Wv)(l,{key:t,to:`/article/${n.metadata.slug}`,class:"masonry-item"},{default:(0,s.k6)((()=>[(0,s.Lk)("img",{src:n.metadata.imgUrl,alt:"Placeholder Image "+t,class:"responsive-image"},null,8,B),(0,s.Lk)("div",W,[(0,s.Lk)("p",z,(0,i.v_)(n.metadata.title||"未命名文章"),1),(0,s.Lk)("span",O,[(0,s.bF)(p,null,{default:(0,s.k6)((()=>[(0,s.bF)(c)])),_:1}),(0,s.eW)(" "+(0,i.v_)(n.metadata.date||"未知日期"),1)])])])),_:2},1032,["to"])))),128))])])])])])}function F(){const n=e(9307),t=n.keys().map((n=>n.replace("./",""))),o=t.map((t=>{const e=n(`./${t}`).default,o={},s=e.match(/\+\+\+([\s\S]*?)\+\+\+/);let i=e;if(s){const n=s[1].trim();n.split("\n").forEach((n=>{const[t,e]=n.split("=");o[t.trim()]=e.trim()})),o.slug=o.title.trim().replace(/\s+/g,"-"),i=e.replace(s[0],"").trim()}if(!o.imgUrl){const n=e.match(/https?:\/\/[^"\s]+\.(jpg|jpeg|png|gif)/);o.imgUrl=n?n[0]:"https://www.contentviewspro.com/wp-content/uploads/2017/07/default_image.png"}return{file:t,metadata:o,content:i}}));return o}var R={name:"HomePage",data(){return{articles:[]}},created(){this.articles=F()}};const J=(0,b.A)(R,[["render",P],["__scopeId","data-v-5da557bb"]]);var G=J;const j={class:"markdown-container"},H={class:"scroll-view"},X=["innerHTML"];function M(n,t,e,o,i,a){return(0,s.uX)(),(0,s.CE)("div",j,[(0,s.Lk)("div",H,[(0,s.Lk)("div",{innerHTML:o.compiledMarkdown,class:"markdown-content"},null,8,X)])])}var N=e(144),U=e(357),V={name:"ArticlePage",setup(){const n=(0,N.KR)(""),t=(0,D.lq)(),e=F();for(const o of e)o.metadata.slug===t.params.slug&&(n.value=(0,U.xI)(o.content));return{compiledMarkdown:n}}};const $=(0,b.A)(V,[["render",M],["__scopeId","data-v-01a7a486"]]);var K=$;const Q={class:"links-page"},Y={class:"links-content-container"},Z={class:"links-container"},nn=["src","alt"],tn=["href"];function en(n,t,e,o,a,r){return(0,s.uX)(),(0,s.CE)("div",Q,[(0,s.Lk)("div",Y,[t[2]||(t[2]=(0,s.Lk)("h1",null,"我的联系方式 🔗",-1)),(0,s.Lk)("div",Z,[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(a.links,(n=>((0,s.uX)(),(0,s.CE)("div",{key:n.title,class:"links-item"},[(0,s.Lk)("img",{class:"links-item-icon",src:n.icon,alt:n.title},null,8,nn),(0,s.Lk)("a",{class:"links-item-title",href:n.url},(0,i.v_)(n.title),9,tn)])))),128)),(0,s.Lk)("div",{class:"links-item",onClick:t[0]||(t[0]=n=>r.copyToClipboard("nagisa12321"))},t[1]||(t[1]=[(0,s.Lk)("img",{class:"links-item-icon",src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQWgcU1gDqq-tVWNh9se74lXiHt48_dTS9frg&s",alt:"Wechat"},null,-1),(0,s.Lk)("a",{class:"links-item-title"},"nagisa12321",-1)]))])])])}var on={name:"LinksPage",methods:{copyToClipboard(n){navigator.clipboard.writeText(n).then((()=>{this.$message({message:"已复制到剪贴板",type:"success"})}))}},data(){return{links:[{title:"nagisa77",icon:"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",url:"https://github.com/nagisa77"},{title:"blog",icon:"https://cdn1.iconfinder.com/data/icons/logotypes/32/blogger-1024.png",url:"https://nagisa77.github.io"},{title:"猫仔布丁🍮",icon:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSrLEt7CpnTRQ1va0on-RGO3aDsgpdlNFUoaw&s",url:"https://v.douyin.com/ihMExh2L/?utm_campaign=client_share&app=aweme&utm_medium=ios&tt_from=more&utm_source=more"},{title:"jtchen78",icon:"https://i.pinimg.com/474x/1e/d6/e0/1ed6e0a9e69176a5fdb7e090a1046b86.jpg",url:"https://www.instagram.com/jtchen78/"}]}}};const sn=(0,b.A)(on,[["render",en],["__scopeId","data-v-a4c0ee44"]]);var an=sn;const rn=[{path:"/",component:G},{path:"/article/:slug",component:K},{path:"/links",component:an}],cn=(0,D.aE)({history:(0,D.Bt)(),routes:rn});var pn=cn,ln=e(1950),un=(e(4188),e(7477));const mn=(0,o.Ef)(E);mn.use(pn),mn.use(ln.A);for(const[dn,hn]of Object.entries(un))mn.component(dn,hn);mn.mount("#app")},9307:function(n,t,e){var o={"./Dora.md":2894,"./IDEA 破解.md":3352,"./JWT的原理和思考.md":2498,"./Whats-happened-to-Spotify.md":4732,"./rwd.md":545,"./ux_front_end.md":9701,"./vps.md":4127,"./why-blogs.md":1590,"./关于图床.md":7447};function s(n){var t=i(n);return e(t)}function i(n){if(!e.o(o,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return o[n]}s.keys=function(){return Object.keys(o)},s.resolve=i,n.exports=s,s.id=9307}},t={};function e(o){var s=t[o];if(void 0!==s)return s.exports;var i=t[o]={exports:{}};return n[o].call(i.exports,i,i.exports,e),i.exports}e.m=n,function(){var n=[];e.O=function(t,o,s,i){if(!o){var a=1/0;for(l=0;l<n.length;l++){o=n[l][0],s=n[l][1],i=n[l][2];for(var r=!0,c=0;c<o.length;c++)(!1&i||a>=i)&&Object.keys(e.O).every((function(n){return e.O[n](o[c])}))?o.splice(c--,1):(r=!1,i<a&&(a=i));if(r){n.splice(l--,1);var p=s();void 0!==p&&(t=p)}}return t}i=i||0;for(var l=n.length;l>0&&n[l-1][2]>i;l--)n[l]=n[l-1];n[l]=[o,s,i]}}(),function(){e.n=function(n){var t=n&&n.__esModule?function(){return n["default"]}:function(){return n};return e.d(t,{a:t}),t}}(),function(){e.d=function(n,t){for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})}}(),function(){e.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"===typeof window)return window}}()}(),function(){e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)}}(),function(){e.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}}(),function(){var n={524:0};e.O.j=function(t){return 0===n[t]};var t=function(t,o){var s,i,a=o[0],r=o[1],c=o[2],p=0;if(a.some((function(t){return 0!==n[t]}))){for(s in r)e.o(r,s)&&(e.m[s]=r[s]);if(c)var l=c(e)}for(t&&t(o);p<a.length;p++)i=a[p],e.o(n,i)&&n[i]&&n[i][0](),n[i]=0;return e.O(l)},o=self["webpackChunktim_blog_v2"]=self["webpackChunktim_blog_v2"]||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))}();var o=e.O(void 0,[504],(function(){return e(1800)}));o=e.O(o)})();
//# sourceMappingURL=app.7ea40ef8.js.map