<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tim&#39;s Blog</title>
    <link>/</link>
    <description>Recent content on Tim&#39;s Blog</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Sep 2024 13:06:45 +0800</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>做一个网站之前，需要提前考虑什么（用户体验、前端初始化构建）？</title>
      <link>/posts/ux_front_end/</link>
      <pubDate>Wed, 11 Sep 2024 13:06:45 +0800</pubDate>
      <guid>/posts/ux_front_end/</guid>
      <description>user experience 的五个步骤 设计过程可以分为五个关键步骤：共情、定义、构思、原型设计和测试。这些步骤帮助设计师从用户需求出发，逐步形成一个完整的设计方案。
1. 共情 共情是设计的第一步，重点是理解用户的需求和痛点。设计师通过访谈、问卷调查等方式，深入了解用户的使用场景，掌握他们的期望和挑战。通过竞品分析，还可以进一步了解市场现有产品的优缺点，为设计提供更多参考。
2. 定义 定义阶段是将收集到的用户信息整理归纳，并确定最重要的用户问题。设计师需要明确用户画像，列出他们的需求清单，并以此为基础构建问题陈述。这一步确保设计过程中始终关注用户的核心需求，从而有针对性地解决实际问题。
3. 构思 构思是一个创意爆发的阶段。设计师通过头脑风暴提出尽可能多的解决方案，而不局限于现实可行性。常用的方法包括“我们如何才能……”的问题形式以及竞品审查，帮助团队从不同角度探讨可能的设计方案。
4. 原型设计 原型设计是将构思阶段的想法转化为可视化的设计模型。设计师通常从低保真模型开始，通过线框图等工具迅速搭建产品结构，并展示信息架构。原型是获取用户反馈的重要工具，可以帮助设计师在正式产品开发之前进行多轮优化。
5. 测试 测试是设计的最后一个阶段，设计师通过用户测试来验证原型的可用性。通过实际用户的操作和反馈，设计师可以发现产品中的不足，并进行改进，确保最终的产品能够满足用户需求并带来良好的体验。
这五个步骤相辅相成，形成了一个完整的设计闭环，确保设计师在每一步都考虑到用户的需求和反馈。
Web 1. 提前做好响应式的布局 如何做好响应式布局，可以看我的文章 响应式布局指南，里面有较为详细的解释。
2. 提前做 i18n 策略 什么是 i18n 策略？ i18n 策略指的是国际化（Internationalization）策略，旨在使应用程序能够适应不同国家和地区的语言、文化和地区设置，而不需要对代码进行大规模修改。
在 Vue 中做 i18n 策略 安装好必要的依赖：
npm install vue-i18n 在 main.js 中使用 i18n：
import { createApp } from &amp;#39;vue&amp;#39;; import App from &amp;#39;./App.vue&amp;#39;; import { createI18n } from &amp;#39;vue-i18n&amp;#39;; import en from &amp;#39;./locales/en.json&amp;#39;; import zh from &amp;#39;.</description>
    </item>
    <item>
      <title>响应网页设计 &amp; 跨平台设计</title>
      <link>/posts/rwd/</link>
      <pubDate>Mon, 09 Sep 2024 20:51:03 +0800</pubDate>
      <guid>/posts/rwd/</guid>
      <description>响应式网页设计（Responsive Web Design，简称RWD）是一种网页设计技术，旨在使网页能够根据用户设备的屏幕大小、分辨率和方向自动调整布局，从而在各种设备上（如手机、平板、笔记本和桌面电脑）提供最佳的用户体验。
核心概念： 1. 流式布局 （Fluid Grid）： 通过相对单位（如百分比或 vw、vh）而非固定的像素单位来定义页面元素的宽度和高度，使其随屏幕大小的变化而变化。
2. 弹性图片与媒体（Flexible Images and Media）： 图片和视频等媒体内容的尺寸随容器大小调整，通常通过 max-width: 100% 来确保媒体不会超出其容器范围。
3. 媒体查询 （Media Queries）： 使用 CSS 的 @media 规则，根据设备的不同属性（如屏幕宽度、分辨率）应用不同的样式，使页面在各种设备上显示最佳效果。例如：
Demo: Multi-Column Layout 查看瀑布布局 &amp;amp; 响应式网页设计
Demo: Navbar 查看NavBar的响应式布局实现
代码示例： 以下是一个简单的响应式布局代码，通过媒体查询为不同的屏幕宽度定义了不同的列数：
/* 响应式布局 */ @media (min-width: 600px) { .masonry { column-count: 3; } } @media (min-width: 350px) and (max-width: 599px) { .masonry { column-count: 2; } } @media (max-width: 349px) { .masonry { column-count: 1; } } 但是给我们的思考比较关键 — 设计网页的时候，需要考虑多种设备，多种页面比例，为每种页面比例做定制处理。不然，网页的设计只会在设计师的电脑上好看 :)</description>
    </item>
    <item>
      <title>Dora.ai 使用体验</title>
      <link>/posts/dora/</link>
      <pubDate>Fri, 06 Sep 2024 14:14:38 +0800</pubDate>
      <guid>/posts/dora/</guid>
      <description>Website Dora.ai 官网
Dora AI 是一个无需编码的 AI 网站生成工具，用户只需通过文本提示即可创建网站。它的主要特点包括生成 3D 动画、交互式设计以及无模板限制的自定义布局。Dora AI 支持从 Figma 等设计工具导入作品，并适合初学者和专业人士使用。平台目前提供免费版本，用户可以轻松创建具有视觉吸引力的动态网站
Dora AI - Sites beyond imagination, one prompt away.
Dora: Start with AI, ship 3D animated websites without code
Dora AI - Powerful AI-Powered Website Builder | B12。
尝试1：生成结果 Prompt:
为达到解决高校社团人数众多，难以统一及时管理，活动申请等步骤费时费力的问题，使用 eclipse 和 Oracle 数据库来开发社团管理系统，主要模块是：个人信息模块，实现用户的注册、登录、用户个人信息的查询及修改；网上发布模块，实现用户在登录之后能上传照片，用户们都可以进行评论；日常活动模块，实现用户向管理员发出活动申请，以及对普通社员发出社团通知；审核模块，管理员对用户在网上发布的内容进行审核，对日常活动的申请进行审核；用户管理模块，管理员对用户进行添加、修改、删除、查询。统计分析不同社团成员的数量、流失率、活跃度等。 尝试2：生成结果 之后继续生成，显示博客内容详情页面，但我发现设计语言被随机生成成了另外一种风格。
尝试3：自定义设计风格 Prompt:
A landing page for a software engineer&amp;#39;s personal blog often shares technical articles and blog posts. It needs to have a personal introduction area and another page or area to display the article content.</description>
    </item>
    <item>
      <title>What Happened to Spotify? 翻译搬运</title>
      <link>/posts/whats-happened-to-spotify/</link>
      <pubDate>Tue, 03 Sep 2024 15:47:07 +0800</pubDate>
      <guid>/posts/whats-happened-to-spotify/</guid>
      <description>回声室、利润与自2017年以来艺术家发现的衰退 Rosie Hoggmascall
在 growthdives.com 免费阅读 🕺
时不时地，我会留意工作时背景中播放的音乐。我开始感到不满。
这些歌曲我已经听了成百上千遍。
我打开应用，点击暂停，然后尝试寻找其他音乐。
但很难找到我想听的东西。
所以我懒得去找，总是听相同的 深度工作播放列表，希望它偶尔能更新。
这种潜藏的挫败感已经酝酿了几个月。而且我花了一段时间才意识到。
直到我读到 为什么我终于放弃了Spotify 的文章，由我的朋友Ben分享，作者是 Kyle Chayka 。
然后一切都明白了。
我意识到：
我陷入了一个深度回声室 我找不到我想听的歌曲或播客 我经常迷失在复杂的界面中 最终，我正在失去与我喜欢的艺术家的联系，音乐品味也停滞不前 ⠀但是为什么呢？
很显然，轻松听到好音乐是Spotify的核心价值主张吧？显然他们正在朝这个方向努力？
……
为了试图解开我的回声室以及缺乏新曲目的困扰，我回溯到2017年，研究了首页的结构如何帮助我们发现音乐，以及这些年来的变化。
我们将探讨Spotify的UI、UX以及整体商业战略，以弄清他们为什么似乎在优化某些正在削弱核心用户体验的东西。
首先，让我们来看一些商业背景，帮助我们理解为什么Spotify可能在UI中更加突出某些部分（咳咳 播客 咳咳）。
Spotify艰难的盈利之旅 🥴 我在去年11月（2023年）撰写了Spotify重返盈利 的文章。这是自2021年以来音乐流媒体服务首次报告盈利。
去年全年，它裁减了17%的员工 和大量的市场营销支出。
它还提高了价格。多年来，Spotify的月订阅费一直是9.99美元，直到2023年7月，主要市场的价格上涨了1美元](https://www.theverge.com/2023/7/24/23805364/spotify-us-price-increase-10-99-a-month-9-99-month-twelve-years)。在2024年，他们再次将价格提高了1美元。
Spotify 价格上涨邮件（来源: The Verge）
这些成本削减和价格上涨确实产生了影响，Spotify的第二季度财报 表示：
得益于健康的订阅者增长、货币化的改善以及创纪录的盈利，Spotify报告…
月活跃用户 同比增长14%，达到6.26亿
订阅者 同比增长12%，达到2.46亿
总收入 同比增长20%，达到38亿欧元
毛利率 达到29.2%
对于那些不太关注商业的人来说，这里有几个非常 有趣 的点👀：
1 月活跃用户增长比订阅者多，表明从免费到付费的转换率在下降
2 总收入增长比订阅者多，表明价格上涨推动了每用户平均收入（ARPU）的增长。也就是说，ARPU的增长几乎和订阅者增长一样驱动了盈利
3 毛利率比去年提高了约5%。这是因为Spotify的播客业务成本降低**，**比如减少了播客独家授权的支出（例如不再花大钱让人们像乔·罗根那样只在一个平台上播出）。根据CEO Daniel Ek的说法：“播客业务去年还是拖累。现在它是我们的另一个利润中心。”
这些数据表明，Spotify是一家更好的公司，但不一定是一个更好的产品。
鉴于数字的普遍乐观，他们开始有点大手大脚了。
CEO最近分享说，他们不会“在全年恢复一些市场营销支出……因为我们希望继续增长，我们发现，在某些地区，我们可能削减得太多了。” 他们还正在招聘67个职位，覆盖欧洲、亚洲和北美。</description>
    </item>
    <item>
      <title>JWT的原理和思考</title>
      <link>/posts/jwt%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E6%80%9D%E8%80%83/</link>
      <pubDate>Fri, 30 Aug 2024 11:50:24 +0800</pubDate>
      <guid>/posts/jwt%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E6%80%9D%E8%80%83/</guid>
      <description>JWT 是啥？ JWT（JSON Web Token）是一种用于在各方之间作为 JSON 对象安全传输信息的开放标准（RFC 7519）。该信息可以被验证和信任，因为它是经过数字签名的。JWT 通常用于身份验证和信息交换。
JWT 由三部分组成，通常以点 (.) 分隔：
Header（头部）：描述签名的算法和类型，通常使用的是 HMAC SHA256。 Payload（负载）：包含声明（claims），这部分是实际的传输数据，可以包括用户身份信息、权限、过期时间等。 Signature（签名）：用于验证消息是否未被篡改。它是通过将头部和负载组合在一起，使用指定的签名算法（如 HMAC SHA256）以及一个密钥生成的。 JWT 的基本格式如下：
xxxxx.yyyyy.zzzzz JWT 的加密流程 JWT 的一个显著特点是“自包含”，也就是说 JWT 本身包含了所有的信息，无需服务器存储状态，服务器只负责每一次的验证。这样服务器就无需存储客户端状态（如登录状态、过期时间等）。
登录时，服务端会根据用户登录信息和时间戳，返回给客户端一个 JWT token。
前端登录成功后，会将 token 存储在 localStorage 中。
有什么优点？ 之后的 API 调用中，可以不再传递用户信息。通过前端 Hook 和后端 Hook，自动实施鉴权和重定向。
前端可以设置全局请求拦截器，将 JWT token 添加到请求头中。
这样一来，登录模块的权限检查可以独立于具体业务进行鉴权；前端也不再需要在业务代码中传递用户信息，从而提高了代码的可维护性。
其他的做法：Session + Cookie 在这种方式中，状态存储在服务端。服务器在用户登录时创建一个会话（Session），并将会话 ID 存储在服务器端（通常在内存或数据库中）。服务器会将会话 ID 通过 cookie 发送到客户端，客户端每次请求时会自动携带这个 cookie。服务器通过会话 ID 查找和验证会话数据，以确定用户身份。与 JWT 不同的是，部分信息存在服务端，没有“自包含”的特点。
其他的做法：OAuth 2.0 Google 登录是 OAuth 2.0 的具体实现，通过 OAuth 2.</description>
    </item>
    <item>
      <title>关于图床</title>
      <link>/posts/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Thu, 29 Aug 2024 22:07:12 +0800</pubDate>
      <guid>/posts/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A/</guid>
      <description>什么是图床？ 图床（Image Hosting Service）是指专门用于存储和管理图片的在线服务。用户可以将图片上传到图床，然后获取一个图片的外链 URL，这个 URL 可以嵌入到其他网页、博客、社交媒体、论坛等地方，用于展示图片而不需要将图片文件直接保存在这些平台上。
什么情况需要用图床？ 图床是专门用于存储和管理图片的在线服务，用户可以将图片上传到图床，然后获取图片的外链 URL，用于在其他网页、博客、社交媒体等地方展示图片。使用图床可以减少网站服务器的负担，因为图片存储在图床服务提供商的服务器上，减少了你自己服务器的存储空间和带宽消耗，从而提升网站的加载速度和性能。优质的图床通常使用内容分发网络（CDN），能够在全球范围内快速加载图片，提升用户体验。当你需要在多个平台上共享和分发同一张图片时，图床提供的外链 URL 可以方便地实现跨平台展示，而无需重复上传图片。此外，图床还可以作为图片的存档和备份方式，确保图片在原始存储位置出现问题时不会丢失。
我自己的案例 我搭建了一个博客 http://nagisa77.github.io/ ，但是由于GitHub.io 下载速率的限制，我把图片都部署到GitHub上面了，加载奇慢，严重影响体验；之后选择腾讯云COS作为图床，效果就好非常多了，虽然页面数据搭载在GitHubio，但是图片在腾讯云，可以做到秒开。
此外我还想之后做自己的网站，也可以利用这个图床去做（10元/年）。费用还行。
腾讯云 COS 图片的上传和下载 上传
对于博客场景，因为是“大家都可以访问我的博客”，也可以直接设置成公有读私有写。
下载
下载只要用访问域名+文件后缀即可直接下载。
把图片链接弄在Markdown中直接部署。
这样就可以实现托管在GithubIO的博客秒开啦～
图床的工具 uPic uPic 可以实现绑定认证后，在本地上传图片，而无需打开网页。
图床的思考 本质是一种解耦的思维。作为开发者最忌讳的是重复造轮子；比如我完全可以写一套代码，部署在自己服务器上，实现图片的增删查改；但是不如每个月0.8元，让腾讯云托管我的服务；另外如果我的服务器部署了自己手写的“类图床”，也会吃到下行流量，其次就还有性能方面瓶颈。
让我想到微信小程序的一些设施 — 云函数、云存储等等，其实都是如此。开发者只要提交逻辑，后台服务的繁琐部署都免去了，这也是一种解耦的思维的实践。你只要交19元/月，省去大量配置成本。
程序员本质是搬砖，但是践行着“少写代码多思考”的主题思维，又会不知不觉间想开通各种云服务，本质想要“用钱买重复劳动力”。这像是一种有趣的悖论，所以有没有可能把业务逻辑外包给大学生写是更好的选择？</description>
    </item>
    <item>
      <title>IDEA破解</title>
      <link>/posts/idea-%E7%A0%B4%E8%A7%A3/</link>
      <pubDate>Thu, 29 Aug 2024 17:31:48 +0800</pubDate>
      <guid>/posts/idea-%E7%A0%B4%E8%A7%A3/</guid>
      <description>查看原文
1. 下载 IDEA 下载链接
2. 脚本 下载脚本：百度网盘链接 提取码: m494</description>
    </item>
    <item>
      <title>VPS 服务器搭建 — ChatGPT中转站</title>
      <link>/posts/vps/</link>
      <pubDate>Thu, 29 Aug 2024 17:31:48 +0800</pubDate>
      <guid>/posts/vps/</guid>
      <description>在本教程中，我们将详细介绍如何在 VPS 服务器上搭建一个中转站，用于绕过网络限制访问 OpenAI 的 ChatGPT 服务。我们会一步步进行从购买服务器到配置域名、安装必要的软件和工具，以及最后的伪装配置，以确保你的服务器能够稳定且安全地运行。
购买一台云服务器(香港) 首先，我们需要购买一台位于香港的云服务器（步骤省略）。
云服务器里边配置 SSH Key，方便后续使用 为了便于日后的登录操作，我们需要配置 SSH Key 认证：
❯ vim ~/.ssh/authorized_keys 将本机的 ~/.ssh/id_rsa.pub 内容添加到此文件中即可。
测试对于 OpenAI 的可访问性 测试从你的 VPS 服务器是否可以访问 OpenAI 的 ChatGPT 服务。以 Safari 浏览器为例，使用快捷键 ⌥+⌘+u 访问 https://chat.openai.com。
可以看到无法直接访问。我们可以使用 curl 工具进行进一步测试：
curl https://chat.openai.com 在 macOS 终端中测试时，表现为卡死状态。
在香港服务器中，执行 curl 命令后需要输出 binary，可以看到确实有响应。为进一步验证响应内容，在命令后添加 --output -：
结果表明响应是 OK 的。
购买域名，将域名和 VPS 地址绑定 接下来，我们需要为你的 VPS 服务器购买一个域名，并将其绑定到服务器的 IP 地址。你可以在 NameSilo 购买域名。
购买完成后，配置域名的 DNS 解析，将其指向 VPS 的 IP 地址：</description>
    </item>
    <item>
      <title>Why Blogs?</title>
      <link>/posts/why-blogs/</link>
      <pubDate>Thu, 29 Aug 2024 14:12:15 +0800</pubDate>
      <guid>/posts/why-blogs/</guid>
      <description>为什么我要搭建个人博客 作为一名刚毕业两年的程序员，我觉得有一个个人博客是个不错的主意。首先，这是我在数字世界里展示自己的方式之一。要在这个信息泛滥的时代脱颖而出，让别人迅速了解你，一个博客链接无疑是最快捷的途径。它可以是我的线上名片，不论是求职还是与同行交流，丢个链接过去，别人就能一览我的想法和技术积累。
其次，搭建博客也是我提升技术的好机会。通过这个项目，我可以实践全栈开发，从前端的美化设计，到后端的逻辑实现，甚至服务器的部署与优化，每一步都能帮助我更深入地理解技术。未来，我打算重构这个博客，让它真正成为我个人风格的代表作品。毕竟，自己设计、自己开发、自己部署的东西，最能体现个人的能力和审美。
当然，博客还承载着我成长和思考的记录。工作中的一些问题、解决问题的过程、对新技术的探索，这些都是值得记下来的东西。通过写博客，我可以更系统地整理这些思考，回头看的时候，也能感受到自己的成长和进步。
最有趣的地方是，博客还可能带来一些意想不到的收获。随着内容的不断丰富，也许会有更多志同道合的人发现这个小角落。大家可以在这里分享心得、交流经验，甚至可能碰撞出一些合作的火花。
这就是我决定搭建个人博客的理由。今天是个起点，虽然这篇博客只有寥寥几句，但它意味着我开始在数字世界里留下自己的足迹。今后，我会在这里持续分享更多内容，也希望这个博客能在我的职业生涯中，成为一块有趣且有用的积木。期待未来有更多的相遇和交流！</description>
    </item>
  </channel>
</rss>
